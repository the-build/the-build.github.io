{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-listing-index-tsx","path":"/blog/","result":{"pageContext":{"articles":[{"banner":{"alt":"","caption":"","src":null},"body":"<blockquote>\n<h2>💡  <strong>Situation</strong></h2>\n</blockquote>\n<ul>\n<li>\n<p>APM 제품의 application 로그를 시계열 데이터로 적재하고있다.</p>\n</li>\n<li>\n<p>게시판 형태의 페이지에서, 페이지네이션이 가능한 검색이 필요하다.</p>\n</li>\n<li>\n<p>1만건이 넘을 때 페이지를 불러올 수 없다.</p>\n</li>\n</ul>\n<blockquote>\n<h2>📋 <strong>Task</strong></h2>\n</blockquote>\n<ul>\n<li>OpenSearch의 공식 문서를 읽고 제약사항과 대안을 확인한다.</li>\n<li>부족하면 구글링하여 다른 use case를 파악한다.</li>\n<li>위 두가지 내용을 gpt 통해 좋은 방법을 확인 후 채택한다.</li>\n<li>테스트 코드 작성하여, 의도한 대로 되는지 시도해본다.</li>\n</ul>\n<blockquote>\n<h2>👨‍💻 <strong>Action</strong></h2>\n</blockquote>\n<ul>\n<li>\n<p>OpenSearch 문서 확인 <br>\r\n<img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/0ec673ec-4b57-492b-9d17-2eb3865a87a3/image.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>지인찬스 → N 사는 6천건으로 설정</p>\n</li>\n<li>\n<p>기본 1만건이지만, 설정으로 바꿀 수 있는 점 확인</p>\n<ul>\n<li>document 사이즈나 검색 빈도를 고려해서</li>\n<li>건수를 늘릴 수록 메모리 사용량이 많아져, 검색에 지장 갈 수 있으니 크게 잡지 않는게 좋은 점 확인</li>\n</ul>\n</li>\n<li>\n<p>OpenSearch의 근본인 Elastic Search도 찾아보아도 동일<br>\r\n<img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/b47031db-3fa4-4f1d-9a72-ed2a4cc0c952/image.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>대안은 scroll 과 search_after를 사용하면 가능한점 확인</p>\n<ul>\n<li>원리는 마지막 데이터의 고유 아이디와 인덱스 정보를 가지고, 마지막을 찾아가 그 위치(offset)부터 페이지 사이즈만큼 조회하도록 함.<br>\r\n<img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/05da9c9c-4705-4287-b082-43885ac9733a/image.png\" alt=\"image.png\"></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n<ul>\n<li>scroll 사용해서 페이지네이션 하도록 변경</li>\n<li>프론트개발 리드 분께서 이해 못하셔서 설명해드렸지만, 20년동안 처음 본다하셔서 RDB와 다른 점과 공식 문서, gpt 검색결과 토대로 ppt 만들어 pr하여 납득시켜드리는 좋은 경험도 함.</li>\n</ul>","categories":["Computer Science"],"date":"October 11, 2024","description":"","id":"633bf2d8-c642-501c-8a38-17e896afd749","keywords":["OpenSearch","Elastic Search","inqury","pagination"],"slug":"/ComputerScience/maximum-inqury-count-of-opensearch/","title":"OpenSearch 최대 조회 건수 ","readingTime":{"text":"3 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<h2>Overview</h2>\n<ul>\n<li>회사에서 운영하는 배포 파이프 라인이 있었지만,</li>\n</ul>\n<p>접근할 수 있는 권한이 많지 않고, 회사에서 사용하는 구성을 개인적으로 학습하고자 동일하게 구성해둔 파이프 라인이 있는데 그곳을 다른 환경으로 이사 시키기 위해 작성해보았다.</p>\n<ul>\n<li>설치도 간단했지만, 백업도 간단하다</li>\n</ul>\n<h2>절차</h2>\n<p>harbor 서비스 종류 → 백업 → 새로운 서버에 harbor 설치 → 새로운 harbor 서비스 종료 → 백업한 자료로 /data 디렉토리 덮어쓰기</p>\n<h2>백업</h2>\n<ul>\n<li>참고할 디렉토리 위치 및 설정파일\n<ul>\n<li>데이터 관련 디렉토리: /data</li>\n<li>환경설정 관련 디렉토리: /opt/harbor 또는 /usr/local/harbor\n<ul>\n<li>harbor.yml\n<ul>\n<li>hostname</li>\n<li>http.port</li>\n<li>harbor_admin_password: Harbor12345</li>\n<li>database.password: root123</li>\n<li>data_volume: /data</li>\n<li>upload_purging.enabled: true</li>\n<li>upload_purging.age: 168h</li>\n<li>upload_purging.interval: 24h</li>\n<li>cache.enabled: false   #이건 서버성능에 따라</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>정상확인</h2>\n<h3>서비스 확인</h3>\n<p><code class=\"language-text\">docker compose watch</code></p>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/81786e00-d54c-4fbf-b29c-f347f93b8bad/image.png\" alt=\"image.png\"></p>\n<h3>DB 연결 확인</h3>\n<ul>\n<li>속성정보\n<ul>\n<li>Database: registry</li>\n<li>User: postgres</li>\n<li>Password: harbor.yml 참조</li>\n</ul>\n</li>\n<li>설계를 살짝 추측 해볼 수 있는 구성이다</li>\n</ul>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/23e59fdb-f9f6-4467-9e2c-bd2513c8070e/image.png\" alt=\"image.png\"></p>\n<h2>회고</h2>\n<ul>\n<li>검색한 결과나 chatGPT도 크게 다르지 않았어서 어렵지 않았다.</li>\n<li>설치할 때는 관심이 안 갔지만, 관리하려고 보니 DB구성을 보게 되고 설정과 구성을 보아 설계를 가늠할 수 있어서 또 다른 재미도 있었다.</li>\n</ul>","categories":["Computer Science"],"date":"October 04, 2024","description":"","id":"54cfce06-2338-5ff6-9d63-5b33a72e5ac4","keywords":["Harbor","back up","recover"],"slug":"/ComputerScience/back-up-and-recover-for-the-harobr/","title":"Harbor 백업 및 복원 작업","readingTime":{"text":"2 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<h2>Overview</h2>\n<p>리더의 범위는 팀장, 부서장 정도로 정의한다.\r\n만나왔던 리더들의 좋은 점과 보완할 단점, 그리고 검색했던 구글의 성공한 팀문화도 취합하여 작성하였으며,\r\n나도 완벽한 사람이 아니기에 노력차원으로 mindset하기 위해 작성하였다.</p>\n<h2>Conditions of Leader</h2>\n<ul>\n<li>사람은 신이 아니다, 누구나 완벽하지 않다. 이 사실을 잊지 말자.</li>\n<li>감정적으로 동료를 대하지 않아야 한다.</li>\n<li>심리적 안정감을 지속적으로 주어야 하며, 내가 책임질 수 있는 부분만 설명하자.</li>\n<li>top-down 방식이 아닌지 계속 점검하고, 대등한 관계임을 잊지 말자.</li>\n<li>실수는 인정하고, 사과를 빠르게, 그리고 냉정하게.</li>\n<li>선을 넘지 않아야 한다. 사적인 영역과 조언의 영역과 위하는 마음까지도. (오지랖 X)</li>\n<li>편애하지 않아야 한다. 일 잘하고 말 잘 따라주는 동료를 믿다가 발등 찍힌다.</li>\n<li>스케줄 관리를 잘해야 한다.</li>\n<li>업무의 전반적으로 파악하고 있어야 한다.</li>\n<li>말과 행동이 부정적이지 않고, 긍정적으로! 에너지를 뿜어야 한다.</li>\n<li>동료(후배)의 밥그릇(업무, 성과, 성의)을 빼앗지 않아야 한다.</li>\n<li>그룹 안에서 책임을 저야 할 때, 같이 일하는 동료를 비난하기보다 같이 져야 한다.</li>\n<li>동료와 대화 중 동료의 말하는 도중 끊어 먹지 않는다.</li>\n<li>대화의 본질을 흔들지 않는다. 다른 이야기 하고 싶으면 양해를 구하자.</li>\n<li>연차로 들먹이지 말자, 항상 배울 준비를 하고, 대응할 생각을 하자.</li>\n</ul>","categories":["Mindset & Insight"],"date":"May 15, 2024","description":"이상적인 리더의 특성을 모아보았습니다.","id":"dd2d0911-2bb7-57b0-957b-f630d7591fb8","keywords":["leader"],"slug":"/MindsetandInsight/what-is-condition-of-the-leader/","title":"리더의 조건","readingTime":{"text":"3 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<aside>\n<blockquote>\n<h2>💡 <strong>Situation</strong></h2>\n</blockquote>\n</aside>\n<p>전달받은 숫자 배열에 대해 인덱스를 pivot으로 설정하였을 때,</p>\n<p>pivot 기준으로 왼쪽에 대해 합산한 결과와 오른쪽으로 합산한 결과를 비교하여 같으면 해당 피봇을 전달하고, 전달할게 없으면 -1 을 반환한다.</p>\n<aside>\n<blockquote>\n<h2>📋 <strong>Task</strong></h2>\n</blockquote>\n</aside>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  for 문 사용하여\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  피봇 기준 왼쪽을 합산하고</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  피봇 기준 오른쪽을 합산하여</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  두 합산을 비교하여 반환한다</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  반환할게 없으면 -1 을 반환한다</li>\n</ul>\n<aside>\n<blockquote>\n<h2>🧑‍💻 <strong>Action</strong></h2>\n</blockquote>\n</aside>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            lSum <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n            rSum <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">if</span> lSum <span class=\"token operator\">==</span> rSum<span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">return</span> idx\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>\n<ul>\n<li>8분 만에 풀었고</li>\n<li>배열의 from, to 가져오는데 조금 지체하였다</li>\n</ul>\n<aside>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n</aside>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/b9cab2e0-8ce5-4146-b219-7ad9651a1b0c/Untitled.png\" alt=\"Untitled\"></p>\n<p>속도가 너무 마음에 안 든다.</p>\n<p>for문 안에 있는 변수를 빼니 메모리는 좋게 나왔다.</p>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/b5e495ae-56f0-40ce-8de3-4cb5e94f0b46/Untitled.png\" alt=\"Untitled\"></p>\n<p>그리고,</p>\n<p>잘한 사람은 이상한 퍼포먼스를 보였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.out'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\r\ninputs <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>loads<span class=\"token punctuation\">,</span> stdin<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> nums <span class=\"token keyword\">in</span> inputs<span class=\"token punctuation\">:</span>\r\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\r\n    total <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\r\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n    found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\r\n\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> total <span class=\"token operator\">-</span> left <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> left<span class=\"token punctuation\">:</span>\r\n            found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n            <span class=\"token keyword\">break</span>\r\n        left <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> found <span class=\"token keyword\">else</span> i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">)</span></code></pre></div>\n<p>마음에 드는 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\r\n        left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n        right <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            right <span class=\"token operator\">-=</span> n\r\n            <span class=\"token keyword\">if</span> left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">return</span> i\r\n            left <span class=\"token operator\">+=</span> n\r\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>","categories":["Computer Science","Coding"],"date":"February 25, 2024","description":"Solve <724. Find Pivot Index>","id":"c02a7ec4-0688-521f-ab86-6c9760e30780","keywords":["Array","Prefix Sum"],"slug":"/ComputerScience/coding/724-Find-Pivot-Index/","title":"724. Find Pivot Index","readingTime":{"text":"2 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<aside>\n<blockquote>\n<h2>💡 <strong>Situation</strong></h2>\n</blockquote>\n</aside>\n<aside>\n<blockquote>\n<h2>📋 <strong>Task</strong></h2>\n</blockquote>\n</aside>\n<aside>\n<blockquote>\n<h2>🧑‍💻 <strong>Action</strong></h2>\n</blockquote>\n</aside>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">:</span>\r\n    strArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\tself<span class=\"token punctuation\">.</span>strArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        self<span class=\"token punctuation\">.</span>strArr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\r\n        \r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>strArr<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> word<span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span> \r\n        \r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>strArr<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n                \r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n\r\n<span class=\"token operator\">//</span>obj <span class=\"token operator\">=</span> Trie<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">//</span> null\r\n<span class=\"token operator\">//</span> obj<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> null\r\n<span class=\"token operator\">//</span> obj<span class=\"token punctuation\">.</span>search <span class=\"token operator\">//</span> true<span class=\"token punctuation\">,</span> false\r\n</code></pre></div>\n<aside>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n</aside>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/cfabab74-84db-4e53-be15-f1e0cb3fd59e/Untitled.png\" alt=\"Untitled\"></p>","categories":["Computer Science","Coding"],"date":"February 15, 2024","description":"Solve <208. Implement Trie (Prefix Tree)>","id":"ce7ea3c0-d3a2-5dd3-8996-f1b7e3650538","keywords":["Hash Table","String"],"slug":"/ComputerScience/coding/208-Implement-Trie-Prefix-Tree/","title":"208. Implement Trie (Prefix Tree)","readingTime":{"text":"1 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<aside>\n<blockquote>\n<h2><strong>Situation</strong></h2>\n</blockquote>\n</aside>\n<aside>\n<blockquote>\n<h2>📋 <strong>Task</strong></h2>\n</blockquote>\n</aside>\n<aside>\n<blockquote>\n<h2>🧑‍💻 <strong>Action</strong></h2>\n</blockquote>\n</aside>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">:</span>\r\n    strArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\tself<span class=\"token punctuation\">.</span>strArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        self<span class=\"token punctuation\">.</span>strArr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\r\n        \r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>strArr<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> word<span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span> \r\n        \r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>strArr<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n                \r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n\r\n<span class=\"token operator\">//</span>obj <span class=\"token operator\">=</span> Trie<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">//</span> null\r\n<span class=\"token operator\">//</span> obj<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> null\r\n<span class=\"token operator\">//</span> obj<span class=\"token punctuation\">.</span>search <span class=\"token operator\">//</span> true<span class=\"token punctuation\">,</span> false\r\n</code></pre></div>\n<aside>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n</aside>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/cfabab74-84db-4e53-be15-f1e0cb3fd59e/Untitled.png\" alt=\"Untitled\"></p>","categories":["Computer Science","Coding"],"date":"February 13, 2024","description":"Solve <338. Counting Bits>","id":"d6abcfa4-811a-5680-b3c1-3d1e5a67dd11","keywords":[""],"slug":"/ComputerScience/coding/338-Counting-Bits/","title":"338. Counting Bits","readingTime":{"text":"1 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<aside>\n<blockquote>\n<h2>💡 <strong>Situation</strong></h2>\n</blockquote>\n</aside>\n<ul>\n<li>Stack을 활용하여 “*“가 있으면 제거하여 푸는 문제</li>\n</ul>\n<aside>\n<blockquote>\n<h2>📋 <strong>Task</strong></h2>\n</blockquote>\n</aside>\n<ul>\n<li>list.pop() 사용하기</li>\n<li>list to string 방법 찾아보기</li>\n</ul>\n<p>→ ‘’.join(${list})</p>\n<aside>\n<blockquote>\n<h2>🧑‍💻 <strong>Action</strong></h2>\n</blockquote>\n</aside>\n<ul>\n<li>string 도 list로 사용할 수 있음을 알고 있으니 활용</li>\n<li>pop, append를 활용하여 응답결과 만듬</li>\n</ul>\n<ol>\n<li>첫번째 풀이</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">removeStars</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\t\r\n\t\tarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">:</span>\r\n                arr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n                arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n        \r\n        <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\r\n</code></pre></div>\n<p>더 잘 풀은 풀이을 열어보았는데 for문에 range만 없었다.</p>\n<ol>\n<li>두번째 풀이(아주 조금 더 나은 정답)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">removeStars</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\r\n\t\tarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n\r\n    <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> idx <span class=\"token keyword\">is</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">:</span>\r\n            arr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n            arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></code></pre></div>\n<aside>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n</aside>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/43d2656b-420e-401a-bef5-8dbb4cf7f149/Untitled.png\" alt=\"Untitled\"></p>","categories":["Computer Science","Coding"],"date":"February 12, 2024","description":"Solve <2390. Removing Stars From a String>","id":"90396ca7-ea5d-59e1-b575-65e40e8531cd","keywords":["String","Stack","Simulation"],"slug":"/ComputerScience/coding/2390-Removing-Stars-From-a-String/","title":"2390. Removing Stars From a String","readingTime":{"text":"1 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<aside>\n<blockquote>\n<h2>💡 <strong>Situation</strong></h2>\n</blockquote>\n</aside>\n<p>리스트 노드를 역순환 시키면 되는 문제.</p>\n<aside>\n<blockquote>\n<h2>📋 <strong>Task</strong></h2>\n</blockquote>\n</aside>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  TreeNode 때 처럼 재귀함수 사용하기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  List.reversed() 함수 사용하기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  class 변수 사용하여 응답값 만들기</li>\n</ul>\n<aside>\n<blockquote>\n<h2>🧑‍💻 <strong>Action</strong></h2>\n</blockquote>\n</aside>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\r\n<span class=\"token comment\"># class ListNode:</span>\r\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\r\n<span class=\"token comment\">#         self.val = val</span>\r\n<span class=\"token comment\">#         self.next = next</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n\t\t\t\t<span class=\"token comment\">#EN. It needs for 'reversed()'</span>\r\n\t\t\t\t<span class=\"token comment\">#KR. 역순환하기 위한 변수</span>\r\n        valArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n\r\n\t\t\t\t<span class=\"token comment\">#EN. Creating a function to operate recursively</span>\r\n\t\t\t\t<span class=\"token comment\">#KR. 재귀하기 위한 함수 작성</span>\r\n        <span class=\"token keyword\">def</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">return</span>\r\n            valArr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\r\n            func1<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\r\n\r\n        func1<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\r\n\r\n        dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        current <span class=\"token operator\">=</span> dummy\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>valArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\r\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\r\n\r\n        <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<aside>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n</aside>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/912f390e-9b49-4f0b-bffc-e9c62dff185f/Untitled.png\" alt=\"Untitled\"></p>","categories":["Computer Science","Coding"],"date":"February 01, 2024","description":"Solve <206. Reverse Linked List>","id":"ef944458-bc35-542c-8fbb-bb812844dda1","keywords":["Linked List"],"slug":"/ComputerScience/coding/206-Reverse-Linked-List/","title":"206. Reverse Linked List","readingTime":{"text":"1 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<aside>\n<blockquote>\n<h2>💡 <strong>Situation</strong></h2>\n</blockquote>\n</aside>\n<ol>\n<li>There is two TreeNode. Collect had not been Node’s val each TreeNode.</li>\n</ol>\n<p>두 트리노드에 대해 왼쪽에서 오른쪽 방향으로 자식이 없는 노드를 수집한다.\r\n2. 두 트리노드의 자식업는 노드 리스트를 비교하여 순서가 같으면 True, 다르면 False 반환한다.</p>\n<aside>\n<blockquote>\n<h2>📋<strong>Task</strong></h2>\n</blockquote>\n</aside>\n<ul>\n<li>TreeNode 에 대해 응용할 수 있는 방법을 조사</li>\n<li></li>\n</ul>\n<aside>\n<blockquote>\n<h2>🧑‍💻 <strong>Action</strong></h2>\n</blockquote>\n</aside>\n<ul>\n<li>조사한 내용</li>\n</ul>\n<p>**<code class=\"language-text\">TreeNode</code>**을 사용하는 것은 일반적으로 이진 트리와 관련된 여러 작업을 수행하는 데 도움이 됩니다. 아래는 몇 가지 응용 예제와 메소드들에 대한 간략한 설명입니다:</p>\n<ol>\n<li>\n<p><strong>트리 순회 (Tree Traversal):</strong> 이진 트리를 순회하면서 각 노드를 방문하는 작업을 수행하는 것이 일반적입니다. 대표적인 트리 순회 방법으로는 전위 순회(preorder), 중위 순회(inorder), 후위 순회(postorder)가 있습니다. 각각의 순회 방법에 대한 메소드를 구현할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">preorder_traversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\r\n        preorder_traversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\r\n        preorder_traversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><strong>트리 높이 구하기:</strong> 트리의 높이는 루트 노드에서 가장 깊은 리프 노드까지의 거리를 나타냅니다. 트리 높이를 구하는 메소드를 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">tree_height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        left_height <span class=\"token operator\">=</span> tree_height<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\r\n        right_height <span class=\"token operator\">=</span> tree_height<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>left_height<span class=\"token punctuation\">,</span> right_height<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n<li>\n<p><strong>이진 탐색 트리 (BST) 검색:</strong> 이진 탐색 트리에서 특정 값을 검색하는 메소드를 구현할 수 있습니다. 이때, 이진 탐색 트리의 특성을 활용하여 불필요한 탐색을 피할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">search_bst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> node\r\n    <span class=\"token keyword\">if</span> target <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> search_bst<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> search_bst<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><strong>트리 노드 개수 세기:</strong> 트리에 있는 전체 노드의 개수를 세는 메소드를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">count_nodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> count_nodes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> count_nodes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<p>이외에도 이진 트리와 관련된 다양한 작업을 수행할 수 있습니다. 실제 응용에 따라서는 특정한 작업에 필요한 메소드를 추가로 구현할 수 있습니다.</p>\n<ul>\n<li>코딩</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">leafSimilar</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root1<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> root2<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\r\n        leaf1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n        leaf2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n\r\n        <span class=\"token comment\">#root1 is left node</span>\r\n        <span class=\"token comment\">#root2 is right node</span>\r\n        self<span class=\"token punctuation\">.</span>findLeaf<span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">,</span> leaf1<span class=\"token punctuation\">)</span>\r\n        self<span class=\"token punctuation\">.</span>findLeaf<span class=\"token punctuation\">(</span>root2<span class=\"token punctuation\">,</span> leaf2<span class=\"token punctuation\">)</span>\r\n\r\n        <span class=\"token keyword\">if</span> leaf1 <span class=\"token operator\">==</span> leaf2<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findLeaf</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">,</span> leaves<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> node<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n            leaves<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">return</span>\r\n\r\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n            self<span class=\"token punctuation\">.</span>findLeaf<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> leaves<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n            self<span class=\"token punctuation\">.</span>findLeaf<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> leaves<span class=\"token punctuation\">)</span></code></pre></div>\n<aside>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n</aside>\n<ul>\n<li>My answer</li>\n</ul>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/b8a10a1b-7a84-4108-83b2-898e56ce509d/Untitled.png\" alt=\"Untitled\"></p>\n<ul>\n<li>resummit</li>\n</ul>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/33eb21b7-c8a3-421e-8ba3-2ee16c2c7eea/Untitled.png\" alt=\"Untitled\"></p>","categories":["Computer Science","Coding"],"date":"January 28, 2024","description":"Solve <872. Leaf-Similar Trees>","id":"fe7a749d-ed00-563c-be68-15460b64b966","keywords":["Tree","Depth-First Search","Binary Tree"],"slug":"/ComputerScience/coding/872-Leaf-Similar-Trees/","title":"872. Leaf-Similar Trees","readingTime":{"text":"4 min read"}},{"banner":{"alt":"","caption":"","src":null},"body":"<blockquote>\n<h2>💡  <strong>Situation</strong></h2>\n</blockquote>\n<p>숫자 리스트의 중복되는 숫자가 유일한지 확인하는 문제.\r\n<a href=\"https://leetcode.com/problems/unique-number-of-occurrences/description/?envType=study-plan-v2&#x26;envId=leetcode-75\">https://leetcode.com/problems/unique-number-of-occurrences/description/?envType=study-plan-v2&#x26;envId=leetcode-75</a></p>\n<blockquote>\n<h2>📋 <strong>Task</strong></h2>\n</blockquote>\n<ul>\n<li>Dictionary 사용</li>\n<li>set() 사용</li>\n<li>len() 사용</li>\n<li>개선 가능한지 확인하기</li>\n</ul>\n<blockquote>\n<h2>👨‍💻 <strong>Action</strong></h2>\n</blockquote>\n<p>C++ 처럼 변수의 증가 연산자(++)를 쓰고 싶었지만 다른 방법을 사용해야 했다.</p>\n<blockquote>\n<p><em><strong>MAP[변수] += 1</strong></em></p>\n<p>leetcode 안에서는 동작하지 않는 것 같다.</p>\n</blockquote>\n<blockquote>\n<p><em><strong>MAP.get(변수,0) + 1</strong></em></p>\n<p>많이 쓰이는 방법이고, 0이 의미는 조회하는 키의 값이 존재하지 않으면\r\n반환할 default 값이다.\r\n<strong>get</strong>(<em>key</em>[, <em>default</em>])</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">uniqueOccurrences</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\r\n        submap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">:</span>\r\n            submap<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> submap<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>submap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>submap<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<blockquote>\n<h2>🗽 <strong>Result</strong></h2>\n</blockquote>\n<p>처음 푼 결과는 아래와 같았다.</p>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/92a5eb26-4c4d-4e60-97f9-ef634d84230e/Untitled.png\" alt=\"Untitled\"></p>\n<p>그리고, 코드 개선을 시도하던 중 Counter의 존재를 알게 되었는데,\r\n자세히 쓰임 확인하다 보니, 결론적으로 Collections.Counter를 쓰는 문제였다.</p>\n<p>다시 풀어본 코드와 결과는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">uniqueOccurrences</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\r\n        occurrence_counts <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>occurrence_counts<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>occurrence_counts<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/4af44c55-bb9f-4a14-af4e-55648b227811/6bf19000-1e7f-4369-8b94-e537baeee695/Untitled.png\" alt=\"Untitled\"></p>\n<p>아래 Counter에 대한 설명을 조사하였다.</p>\n<blockquote>\n<p><strong>Collectoins.Counter 정의</strong></p>\n<p>**<code class=\"language-text\">collections.Counter</code>**는 파이썬의 내장 클래스로, 요소의 발생 횟수를 세는 데 사용됩니다. 이 클래스는 반복 가능한(iterable) 객체(예: 리스트, 문자열)의 각 요소에 대한 발생 횟수를 쉽게 계산하고 딕셔너리 형태로 제공합니다.</p>\n<p>다음은 **<code class=\"language-text\">Counter</code>**의 주요 기능과 사용법입니다:</p>\n<ol>\n<li>\n<p><strong>Counter 객체 생성:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\r\n\r\nmy_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\r\nmy_counter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><strong>요소의 발생 횟수 확인:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_counter<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 출력: 2 (숫자 2의 발생 횟수)</span></code></pre></div>\n</li>\n<li>\n<p><strong>모든 요소의 발생 횟수 확인:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_counter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 출력: Counter({3: 3, 2: 2, 1: 1})</span></code></pre></div>\n</li>\n<li>\n<p><strong>딕셔너리처럼 사용:<code class=\"language-text\">Counter</code></strong> 객체는 딕셔너리와 유사하게 동작하며, 키와 값으로 이루어진 쌍으로 구성됩니다. 다만, **<code class=\"language-text\">Counter</code>**는 키에 해당하는 요소의 발생 횟수를 값으로 가지고 있습니다.</p>\n</li>\n<li>\n<p><strong>most_common 메서드:<code class=\"language-text\">most_common(n)</code></strong> 메서드는 가장 빈번하게 등장하는 상위 n개의 요소를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_counter<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 출력: [(3, 3), (2, 2)]</span></code></pre></div>\n</li>\n<li>\n<p><strong>업데이트:<code class=\"language-text\">Counter</code></strong> 객체끼리 합칠 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">another_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\r\nmy_counter<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>another_list<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_counter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 출력: Counter({3: 5, 2: 3, 1: 1, 4: 1})</span></code></pre></div>\n</li>\n</ol>\n<p>**<code class=\"language-text\">Counter</code>**는 매우 편리한 도구로, 요소의 발생 횟수를 쉽게 계산하고 분석하는 데 사용됩니다. 위에서 보여준 <strong><code class=\"language-text\">uniqueOccurrences</code></strong> 함수에서도 **<code class=\"language-text\">Counter</code>**를 사용하여 발생 횟수를 세고 있습니다.</p>\n</blockquote>\n<p>Counter를 통해 발생 횟수를 확인하는 용도로 좋다는걸 알게 되었고</p>","categories":["Computer Science","Coding"],"date":"January 21, 2024","description":"Solve <1207. Unique Number of Occurrences>","id":"d3a90e75-544d-579a-be95-47bcd635510a","keywords":["Hash Table","String","Sorting","Counting"],"slug":"/ComputerScience/coding/1207-Unique-Number-of-Occurrences/","title":"1207. Unique Number of Occurrences","readingTime":{"text":"4 min read"}}]}},"staticQueryHashes":["1572444355","1764120992","2636236428","2709378673","3262260831","3584947626","4042740421","540466502","597217301","948380417"],"slicesMap":{}}